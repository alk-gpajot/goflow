// Code generated by goflow DO NOT EDIT.

//go:build !codeanalysis

package graphs

import (
	context "context"
	json "encoding/json"
	errors "errors"

	reduced "github.com/alkemics/goflow/example/graphs/reduced"
)

type Playground struct {
	debug bool
}

func NewPlayground(debug bool) Playground {
	return Playground{
		debug: debug,
	}
}

func (p Playground) Run(ctx context.Context, name string, jsonInputs *json.RawMessage) (jsonOutputs *json.RawMessage, err error) {
	nodes := map[string]func(context.Context, *json.RawMessage) (*json.RawMessage, error){
		"github.com/alkemics/goflow/example/graphs.Adder": func(ctx context.Context, in *json.RawMessage) (*json.RawMessage, error) {
			if in == nil {
				return nil, nil
			}

			var params struct {
				A int `json:"a"`
				B int `json:"b"`
			}
			if err := json.Unmarshal(*in, &params); err != nil {
				return nil, err
			}

			g := NewAdder()
			sum := g.Run(
				params.A,
				params.B,
			)

			res := map[string]interface{}{
				"sum": sum,
			}

			var out json.RawMessage
			if b, err := json.Marshal(res); err != nil {
				return nil, err
			} else {
				out = json.RawMessage(b)
			}

			return &out, nil
		},
		"github.com/alkemics/goflow/example/graphs.Affiner": func(ctx context.Context, in *json.RawMessage) (*json.RawMessage, error) {
			if in == nil {
				return nil, nil
			}

			var params struct {
				A int `json:"a"`
				B int `json:"b"`
				X int `json:"x"`
			}
			if err := json.Unmarshal(*in, &params); err != nil {
				return nil, err
			}

			g := NewAffiner()
			result := g.Run(
				params.A,
				params.B,
				params.X,
			)

			res := map[string]interface{}{
				"result": result,
			}

			var out json.RawMessage
			if b, err := json.Marshal(res); err != nil {
				return nil, err
			} else {
				out = json.RawMessage(b)
			}

			return &out, nil
		},
		"github.com/alkemics/goflow/example/graphs.Playground": func(ctx context.Context, in *json.RawMessage) (*json.RawMessage, error) {
			if in == nil {
				return nil, nil
			}

			var params struct {
				Name       string           `json:"name"`
				JsonInputs *json.RawMessage `json:"jsonInputs"`
			}
			if err := json.Unmarshal(*in, &params); err != nil {
				return nil, err
			}

			g := NewPlayground(p.debug)
			jsonOutputs, err := g.Run(
				ctx,
				params.Name,
				params.JsonInputs,
			)

			res := map[string]interface{}{
				"jsonOutputs": jsonOutputs,
				"err":         err,
			}

			var out json.RawMessage
			if b, err := json.Marshal(res); err != nil {
				return nil, err
			} else {
				out = json.RawMessage(b)
			}

			return &out, nil
		},
		"github.com/alkemics/goflow/example/graphs/reduced.Adder": func(ctx context.Context, in *json.RawMessage) (*json.RawMessage, error) {
			if in == nil {
				return nil, nil
			}

			var params struct {
				A int `json:"a"`
				B int `json:"b"`
			}
			if err := json.Unmarshal(*in, &params); err != nil {
				return nil, err
			}

			g := reduced.NewAdder(p.debug)
			sum := g.Run(
				params.A,
				params.B,
			)

			res := map[string]interface{}{
				"sum": sum,
			}

			var out json.RawMessage
			if b, err := json.Marshal(res); err != nil {
				return nil, err
			} else {
				out = json.RawMessage(b)
			}

			return &out, nil
		},
		"github.com/alkemics/goflow/example/graphs/reduced.Affiner": func(ctx context.Context, in *json.RawMessage) (*json.RawMessage, error) {
			if in == nil {
				return nil, nil
			}

			var params struct {
				A int `json:"a"`
				B int `json:"b"`
				X int `json:"x"`
			}
			if err := json.Unmarshal(*in, &params); err != nil {
				return nil, err
			}

			g := reduced.NewAffiner(p.debug)
			result := g.Run(
				params.A,
				params.B,
				params.X,
			)

			res := map[string]interface{}{
				"result": result,
			}

			var out json.RawMessage
			if b, err := json.Marshal(res); err != nil {
				return nil, err
			} else {
				out = json.RawMessage(b)
			}

			return &out, nil
		},
	}

	run := nodes[name]
	if run == nil {
		return nil, errors.New("not found")
	}
	return run(ctx, jsonInputs)
}

func (p Playground) List() map[string]interface{} {
	return map[string]interface{}{
		"github.com/alkemics/goflow/example/graphs.Adder":           NewAdder(),
		"github.com/alkemics/goflow/example/graphs.Affiner":         NewAffiner(),
		"github.com/alkemics/goflow/example/graphs.Playground":      NewPlayground(p.debug),
		"github.com/alkemics/goflow/example/graphs/reduced.Adder":   reduced.NewAdder(p.debug),
		"github.com/alkemics/goflow/example/graphs/reduced.Affiner": reduced.NewAffiner(p.debug),
	}
}

func (p Playground) Get(name string) interface{} {
	nodes := p.List()
	return nodes[name]
}
