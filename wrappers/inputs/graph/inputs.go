// Code generated by goflow DO NOT EDIT.

//go:build !codeanalysis

package main

import (
	"context"

	"github.com/alkemics/goflow/example/constants/functions"
	"github.com/alkemics/goflow/example/nodes"
)

/*
optional: no
*/
type Inputs struct{}

func NewInputs() Inputs {
	return Inputs{}
}

func newInputs(id string) Inputs {
	return Inputs{}
}

/*
optional: no
*/
func (g *Inputs) Run(ctx context.Context, a int, b []int, no bool) {
	// __add_list outputs
	var __add_list_aggregated []int

	// __add_reducer outputs
	var __add_reducer_aggregated functions.IntReducer

	// __ctx outputs
	var __ctx_ctx context.Context

	// __do_not_print_values outputs
	var __do_not_print_values_aggregated []interface{}

	// __print_values outputs
	var __print_values_aggregated []interface{}

	// add outputs
	var add_result int

	// do_not_print outputs

	// inputs outputs
	var inputs_a int
	var inputs_b []int
	var inputs_no bool

	// make_slice outputs
	var make_slice_list []int

	// print outputs

	igniteNodeID := "ignite"
	doneNodeID := "done"

	done := make(chan string)
	defer close(done)

	steps := map[string]struct {
		deps        map[string]struct{}
		run         func()
		alreadyDone bool
	}{
		"__add_list": {
			deps: map[string]struct{}{
				"inputs":     {},
				"make_slice": {},
				igniteNodeID: {},
			},
			run: func() {
				__add_list_aggregated = append(__add_list_aggregated, inputs_a)
				__add_list_aggregated = append(__add_list_aggregated, inputs_b...)
				__add_list_aggregated = append(__add_list_aggregated, make_slice_list...)
				done <- "__add_list"
			},
			alreadyDone: false,
		},
		"__add_reducer": {
			deps: map[string]struct{}{
				igniteNodeID: {},
			},
			run: func() {
				__add_reducer_aggregated = functions.IntSum
				done <- "__add_reducer"
			},
			alreadyDone: false,
		},
		"__ctx": {
			deps: map[string]struct{}{
				igniteNodeID: {},
			},
			run: func() {
				__ctx_ctx = ctx
				done <- "__ctx"
			},
			alreadyDone: false,
		},
		"__do_not_print_values": {
			deps: map[string]struct{}{
				igniteNodeID: {},
			},
			run: func() {
				__do_not_print_values_aggregated = append(__do_not_print_values_aggregated, "this is not printed")
				done <- "__do_not_print_values"
			},
			alreadyDone: false,
		},
		"__print_values": {
			deps: map[string]struct{}{
				"add":        {},
				igniteNodeID: {},
			},
			run: func() {
				__print_values_aggregated = append(__print_values_aggregated, "the result should be 12")
				__print_values_aggregated = append(__print_values_aggregated, add_result)
				done <- "__print_values"
			},
			alreadyDone: false,
		},
		"add": {
			deps: map[string]struct{}{
				"__add_list":    {},
				"__add_reducer": {},
				igniteNodeID:    {},
			},
			run: func() {
				add_result = nodes.IntAggregator(__add_list_aggregated, __add_reducer_aggregated)
				done <- "add"
			},
			alreadyDone: false,
		},
		"do_not_print": {
			deps: map[string]struct{}{
				"__do_not_print_values": {},
				"inputs":                {},
				igniteNodeID:            {},
			},
			run: func() {
				if inputs_no {
					nodes.Printer(__do_not_print_values_aggregated)
				}

				done <- "do_not_print"
			},
			alreadyDone: false,
		},
		"inputs": {
			deps: map[string]struct{}{
				igniteNodeID: {},
			},
			run: func() {
				inputs_a = a
				inputs_b = b
				inputs_no = no
				done <- "inputs"
			},
			alreadyDone: false,
		},
		"make_slice": {
			deps: map[string]struct{}{
				igniteNodeID: {},
			},
			run: func() {
				make_slice_list = nodes.SliceMaker()
				done <- "make_slice"
			},
			alreadyDone: false,
		},
		"print": {
			deps: map[string]struct{}{
				"__ctx":          {},
				"__print_values": {},
				igniteNodeID:     {},
			},
			run: func() {
				nodes.PrinterCtx(__ctx_ctx, __print_values_aggregated)
				done <- "print"
			},
			alreadyDone: false,
		},
		igniteNodeID: {
			deps: map[string]struct{}{},
			run: func() {
				done <- igniteNodeID
			},
			alreadyDone: false,
		},
		doneNodeID: {
			deps: map[string]struct{}{
				"__add_list":            {},
				"__add_reducer":         {},
				"__ctx":                 {},
				"__do_not_print_values": {},
				"__print_values":        {},
				"add":                   {},
				"do_not_print":          {},
				"inputs":                {},
				"make_slice":            {},
				"print":                 {},
			},
			run: func() {
				done <- doneNodeID
			},
			alreadyDone: false,
		},
	}

	// Ignite
	ignite := steps[igniteNodeID]
	ignite.alreadyDone = true
	steps[igniteNodeID] = ignite
	go steps[igniteNodeID].run()

	// Resolve the graph
	for resolved := range done {
		if resolved == doneNodeID {
			// If all the graph was resolved, get out of the loop
			break
		}

		for name, step := range steps {
			delete(step.deps, resolved)
			if len(step.deps) == 0 && !step.alreadyDone {
				step.alreadyDone = true
				steps[name] = step
				go step.run()
			}
		}
	}

	return
}
